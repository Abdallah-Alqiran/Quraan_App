<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/alqiran/quraanapp/ui/screens/suwar_package/SuwarScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/alqiran/quraanapp/ui/screens/suwar_package/SuwarScreen.kt" />
              <option name="originalContent" value="package com.alqiran.quraanapp.ui.screens.suwar_package&#10;&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.BottomAppBar&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Slider&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat.startForegroundService&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.alqiran.quraanapp.data.datasources.remote.retrofit.model.reciters.RecitersMoshafReading&#10;import com.alqiran.quraanapp.data.datasources.remote.retrofit.model.suwar.AllSuwar&#10;import com.alqiran.quraanapp.ui.components.loading_and_failed.FailedLoadingScreen&#10;import com.alqiran.quraanapp.ui.components.loading_and_failed.LoadingProgressIndicator&#10;import com.alqiran.quraanapp.R.drawable.ic_pause&#10;import com.alqiran.quraanapp.R.drawable.ic_play&#10;import com.alqiran.quraanapp.R.drawable.ic_skip_next&#10;import com.alqiran.quraanapp.R.drawable.ic_skip_previous&#10;import com.alqiran.quraanapp.data.datasources.remote.model.Audio&#10;import com.alqiran.quraanapp.player.service.AudioService&#10;import com.alqiran.quraanapp.ui.components.modifiers.surfaceModifier&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.components.BottomBarPlayer&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.utils.PlayerIconItem&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.utils.timeStampToDuration&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel.AudioEvents&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel.AudioViewModel&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.suwarViewModel.SuwarState&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.suwarViewModel.SuwarViewModel&#10;import kotlin.math.floor&#10;&#10;&#10;@Composable&#10;fun SuwarScreen(suwarListAndServer: RecitersMoshafReading, reciterName: String) {&#10;&#10;    val suwarViewModel = hiltViewModel&lt;SuwarViewModel&gt;()&#10;    val audioViewModel = hiltViewModel&lt;AudioViewModel&gt;()&#10;    val state by suwarViewModel.state.collectAsStateWithLifecycle()&#10;&#10;    var isServiceRunning = false&#10;&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(Unit) {&#10;        suwarViewModel.fetchSuwar()&#10;    }&#10;&#10;    when (state) {&#10;        is SuwarState.Error -&gt; {&#10;            FailedLoadingScreen((state as SuwarState.Error).message) {&#10;                suwarViewModel.fetchSuwar()&#10;            }&#10;        }&#10;&#10;        SuwarState.Loading -&gt; {&#10;            LoadingProgressIndicator()&#10;        }&#10;&#10;        is SuwarState.Success -&gt; {&#10;&#10;            val suwarListNumber = suwarListAndServer.surahList.split(&quot;,&quot;)&#10;&#10;            val audioList = remember(suwarListAndServer.surahList, suwarListAndServer.server, reciterName) {&#10;                suwarListNumber.mapIndexed { index, surahNumber -&gt;&#10;                    Audio(&#10;                        surahNumber = (surahNumber.toInt() - 1).toString(),&#10;                        server = suwarListAndServer.server,&#10;                        surah = (state as SuwarState.Success).allSuwar.suwar[surahNumber.toInt() - 1].name,&#10;                        reciter = reciterName,&#10;                        duration = 0&#10;                    )&#10;                }&#10;            }&#10;&#10;            LaunchedEffect(audioList) {&#10;                Log.e(&quot;Al-qiran&quot;, &quot;Audio List: $audioList&quot;)&#10;                audioViewModel.setAllAudioData(audioList)&#10;            }&#10;&#10;            PrintAllSuwar(&#10;                suwarListAndServer = suwarListAndServer,&#10;                allSuwar = (state as SuwarState.Success).allSuwar,&#10;                reciterName = reciterName,&#10;                progress = audioViewModel.progress,&#10;                onProgress = { audioViewModel.onAudioEvents(AudioEvents.SeekTo(it)) },&#10;                isAudioPlaying = audioViewModel.isPlaying,&#10;                audioList = audioList,&#10;                currentPlayingAudio = audioViewModel.currentSelectedAudio,&#10;                onStart = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.PlayPause)&#10;                },&#10;                onItemClick = {&#10;                    val item = suwarListNumber[it].toInt()&#10;                    Log.d(&quot;Al-qiran&quot;, &quot;from onItemClick in SuwarScreen: item: $item index: ${suwarListNumber[it]} the size: ${suwarListNumber.size}&quot;)&#10;                    audioViewModel.onAudioEvents(AudioEvents.SelectedAudioChange(item))&#10;                    if (!isServiceRunning) {&#10;                        val intent = Intent(context, AudioService::class.java)&#10;                        startForegroundService(context, intent)&#10;                    }&#10;                    isServiceRunning = true&#10;                },&#10;                onNext = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.SeekToNext)&#10;                },&#10;                onPrevious = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.SeekToPrevious)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PrintAllSuwar(&#10;    suwarListAndServer: RecitersMoshafReading,&#10;    allSuwar: AllSuwar,&#10;    reciterName: String,&#10;    progress: Float = 0f,&#10;    onProgress: (Float) -&gt; Unit,&#10;    isAudioPlaying: Boolean = false,&#10;    audioList: List&lt;Audio&gt;,&#10;    currentPlayingAudio: Audio = Audio(),&#10;    audiList: List&lt;Audio&gt; = listOf(),&#10;    onStart: () -&gt; Unit,&#10;    onItemClick: (Int) -&gt; Unit,&#10;    onNext: () -&gt; Unit,&#10;    onPrevious: () -&gt; Unit,&#10;) {&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomBarPlayer(&#10;                progress = progress,&#10;                onProgress = onProgress,&#10;                audio = audioList[0],&#10;                isAudioPlaying = isAudioPlaying,&#10;                onStart = {&#10;                    onStart()&#10;                },&#10;                onNext = {&#10;                    onNext()&#10;                },&#10;                onPrevious = {&#10;                    onPrevious()&#10;                }&#10;            )&#10;        }&#10;    ) {&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            contentPadding = it&#10;        ) {&#10;            val suwarListNumber = suwarListAndServer.surahList.split(&quot;,&quot;)&#10;            items(suwarListNumber.size) { index -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .surfaceModifier(shape = RoundedCornerShape(8.dp))&#10;                        .clickable {&#10;                            onItemClick(index)&#10;                        }&#10;                        .padding(16.dp)&#10;&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${suwarListNumber[index]} - سورة ${allSuwar.suwar[suwarListNumber[index].toInt() - 1].name}&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        modifier = Modifier&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun ArtistInfo(modifier: Modifier = Modifier, audio: Audio) {&#10;    Row(&#10;        modifier = modifier.padding(4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        PlayerIconItem(&#10;            icon = ic_play,&#10;            borderStroke = BorderStroke(&#10;                width = 1.dp,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        ) {}&#10;&#10;        Spacer(modifier = Modifier.size(4.dp))&#10;&#10;        Column {&#10;            Text(&#10;                text = audio.surah,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                overflow = TextOverflow.Clip,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            Spacer(modifier = Modifier.size(4.dp))&#10;&#10;            Text(&#10;                text = audio.reciter,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                overflow = TextOverflow.Clip,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.alqiran.quraanapp.ui.screens.suwar_package&#10;&#10;import android.content.Intent&#10;import android.os.Build&#10;import android.util.Log&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.BottomAppBar&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Slider&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.core.content.ContextCompat.startForegroundService&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.alqiran.quraanapp.data.datasources.remote.retrofit.model.reciters.RecitersMoshafReading&#10;import com.alqiran.quraanapp.data.datasources.remote.retrofit.model.suwar.AllSuwar&#10;import com.alqiran.quraanapp.ui.components.loading_and_failed.FailedLoadingScreen&#10;import com.alqiran.quraanapp.ui.components.loading_and_failed.LoadingProgressIndicator&#10;import com.alqiran.quraanapp.R.drawable.ic_pause&#10;import com.alqiran.quraanapp.R.drawable.ic_play&#10;import com.alqiran.quraanapp.R.drawable.ic_skip_next&#10;import com.alqiran.quraanapp.R.drawable.ic_skip_previous&#10;import com.alqiran.quraanapp.data.datasources.remote.model.Audio&#10;import com.alqiran.quraanapp.player.service.AudioService&#10;import com.alqiran.quraanapp.ui.components.modifiers.surfaceModifier&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.components.BottomBarPlayer&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.utils.PlayerIconItem&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.utils.timeStampToDuration&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel.AudioEvents&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel.AudioViewModel&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.suwarViewModel.SuwarState&#10;import com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.suwarViewModel.SuwarViewModel&#10;import kotlin.math.floor&#10;&#10;&#10;@Composable&#10;fun SuwarScreen(suwarListAndServer: RecitersMoshafReading, reciterName: String) {&#10;&#10;    val suwarViewModel = hiltViewModel&lt;SuwarViewModel&gt;()&#10;    val audioViewModel = hiltViewModel&lt;AudioViewModel&gt;()&#10;    val state by suwarViewModel.state.collectAsStateWithLifecycle()&#10;&#10;    var isServiceRunning = false&#10;&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(Unit) {&#10;        suwarViewModel.fetchSuwar()&#10;    }&#10;&#10;    when (state) {&#10;        is SuwarState.Error -&gt; {&#10;            FailedLoadingScreen((state as SuwarState.Error).message) {&#10;                suwarViewModel.fetchSuwar()&#10;            }&#10;        }&#10;&#10;        SuwarState.Loading -&gt; {&#10;            LoadingProgressIndicator()&#10;        }&#10;&#10;        is SuwarState.Success -&gt; {&#10;&#10;            val suwarListNumber = suwarListAndServer.surahList.split(&quot;,&quot;)&#10;&#10;            val audioList = remember(suwarListAndServer.surahList, suwarListAndServer.server, reciterName) {&#10;                suwarListNumber.map { surahNumber -&gt;&#10;                    Audio(&#10;                        surahNumber = surahNumber, // Use the actual surah number from API&#10;                        server = suwarListAndServer.server,&#10;                        surah = (state as SuwarState.Success).allSuwar.suwar[surahNumber.toInt() - 1].name,&#10;                        reciter = reciterName,&#10;                        duration = 0&#10;                    )&#10;                }&#10;            }&#10;&#10;            LaunchedEffect(audioList) {&#10;                Log.e(&quot;Al-qiran&quot;, &quot;Audio List: $audioList&quot;)&#10;                audioViewModel.setAllAudioData(audioList)&#10;            }&#10;&#10;            PrintAllSuwar(&#10;                suwarListAndServer = suwarListAndServer,&#10;                allSuwar = (state as SuwarState.Success).allSuwar,&#10;                reciterName = reciterName,&#10;                progress = audioViewModel.progress,&#10;                onProgress = { audioViewModel.onAudioEvents(AudioEvents.SeekTo(it)) },&#10;                isAudioPlaying = audioViewModel.isPlaying,&#10;                audioList = audioList,&#10;                currentPlayingAudio = audioViewModel.currentSelectedAudio,&#10;                onStart = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.PlayPause)&#10;                },&#10;                onItemClick = {&#10;                    val surahIndex = it&#10;                    val surahNumber = suwarListNumber[surahIndex].toInt()&#10;                    Log.d(&quot;Al-qiran&quot;, &quot;from onItemClick in SuwarScreen: surahNumber: $surahNumber index: $surahIndex the size: ${suwarListNumber.size}&quot;)&#10;                    audioViewModel.onAudioEvents(AudioEvents.SelectedAudioChange(surahIndex))&#10;                    if (!isServiceRunning) {&#10;                        val intent = Intent(context, AudioService::class.java)&#10;                        startForegroundService(context, intent)&#10;                    }&#10;                    isServiceRunning = true&#10;                },&#10;                onNext = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.SeekToNext)&#10;                },&#10;                onPrevious = {&#10;                    audioViewModel.onAudioEvents(AudioEvents.SeekToPrevious)&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PrintAllSuwar(&#10;    suwarListAndServer: RecitersMoshafReading,&#10;    allSuwar: AllSuwar,&#10;    reciterName: String,&#10;    progress: Float = 0f,&#10;    onProgress: (Float) -&gt; Unit,&#10;    isAudioPlaying: Boolean = false,&#10;    audioList: List&lt;Audio&gt;,&#10;    currentPlayingAudio: Audio = Audio(),&#10;    audiList: List&lt;Audio&gt; = listOf(),&#10;    onStart: () -&gt; Unit,&#10;    onItemClick: (Int) -&gt; Unit,&#10;    onNext: () -&gt; Unit,&#10;    onPrevious: () -&gt; Unit,&#10;) {&#10;&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomBarPlayer(&#10;                progress = progress,&#10;                onProgress = onProgress,&#10;                audio = audioList[0],&#10;                isAudioPlaying = isAudioPlaying,&#10;                onStart = {&#10;                    onStart()&#10;                },&#10;                onNext = {&#10;                    onNext()&#10;                },&#10;                onPrevious = {&#10;                    onPrevious()&#10;                }&#10;            )&#10;        }&#10;    ) {&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            contentPadding = it&#10;        ) {&#10;            val suwarListNumber = suwarListAndServer.surahList.split(&quot;,&quot;)&#10;            items(suwarListNumber.size) { index -&gt;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .surfaceModifier(shape = RoundedCornerShape(8.dp))&#10;                        .clickable {&#10;                            onItemClick(index)&#10;                        }&#10;                        .padding(16.dp)&#10;&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${suwarListNumber[index]} - سورة ${allSuwar.suwar[suwarListNumber[index].toInt() - 1].name}&quot;,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        modifier = Modifier&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun ArtistInfo(modifier: Modifier = Modifier, audio: Audio) {&#10;    Row(&#10;        modifier = modifier.padding(4.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        PlayerIconItem(&#10;            icon = ic_play,&#10;            borderStroke = BorderStroke(&#10;                width = 1.dp,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        ) {}&#10;&#10;        Spacer(modifier = Modifier.size(4.dp))&#10;&#10;        Column {&#10;            Text(&#10;                text = audio.surah,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                overflow = TextOverflow.Clip,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            Spacer(modifier = Modifier.size(4.dp))&#10;&#10;            Text(&#10;                text = audio.reciter,&#10;                style = MaterialTheme.typography.titleSmall,&#10;                overflow = TextOverflow.Clip,&#10;                maxLines = 1&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/alqiran/quraanapp/ui/screens/suwar_package/viewModels/audioViewModel/AudioViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/alqiran/quraanapp/ui/screens/suwar_package/viewModels/audioViewModel/AudioViewModel.kt" />
              <option name="originalContent" value="@file:OptIn(SavedStateHandleSaveableApi::class)&#10;&#10;package com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel&#10;&#10;import android.util.Log&#10;import androidx.compose.runtime.mutableFloatStateOf&#10;import androidx.compose.runtime.mutableLongStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.lifecycle.SavedStateHandle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.viewmodel.compose.SavedStateHandleSaveableApi&#10;import androidx.lifecycle.viewmodel.compose.saveable&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.common.MediaMetadata&#10;import com.alqiran.quraanapp.data.datasources.remote.model.Audio&#10;import com.alqiran.quraanapp.player.service.AudioServiceHandler&#10;import com.alqiran.quraanapp.player.service.AudioState&#10;import com.alqiran.quraanapp.player.service.PlayerEvent&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Inject&#10;&#10;&#10;private val audioDummy = Audio(&#10;    surahNumber = &quot;&quot;, server = &quot;&quot;, surah = &quot;000&quot;, reciter = &quot;&quot;, duration = 0L&#10;)&#10;&#10;&#10;@HiltViewModel&#10;class AudioViewModel @Inject constructor(&#10;    private val audioServiceHandler: AudioServiceHandler,&#10;    savedStateHandle: SavedStateHandle&#10;) : ViewModel() {&#10;&#10;    var duration by savedStateHandle.saveable { mutableLongStateOf(0L) }&#10;    var progress by savedStateHandle.saveable { mutableFloatStateOf(0f) }&#10;    var progressString by savedStateHandle.saveable { mutableStateOf(&quot;00:00&quot;) }&#10;    var isPlaying by savedStateHandle.saveable { mutableStateOf(false) }&#10;    var currentSelectedAudio by savedStateHandle.saveable { mutableStateOf(audioDummy) }&#10;    var audioList by savedStateHandle.saveable { mutableStateOf(listOf&lt;Audio&gt;()) }&#10;&#10;    private val _state = MutableStateFlow&lt;AudioUiState&gt;(AudioUiState.Initial)&#10;    val state = _state.asStateFlow()&#10;&#10;    init {&#10;        viewModelScope.launch {&#10;            audioServiceHandler.audioState.collectLatest { audioState -&gt;&#10;                when (audioState) {&#10;                    AudioState.Initial -&gt; _state.value = AudioUiState.Initial&#10;                    is AudioState.Buffering -&gt; calculateProgressValue(audioState.progress)&#10;                    is AudioState.Playing -&gt; isPlaying = audioState.isPlaying&#10;                    is AudioState.Progress -&gt; calculateProgressValue(audioState.progress)&#10;                    is AudioState.CurrentPlaying -&gt; currentSelectedAudio =&#10;                        audioList[audioState.mediaItemIndex]&#10;&#10;                    is AudioState.Ready -&gt; {&#10;                        duration = audioState.duration&#10;                        _state.value = AudioUiState.Ready&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setAllAudioData(allAudio: List&lt;Audio&gt;) {&#10;        if (audioList == allAudio) return&#10;        audioList = allAudio&#10;        setMediaItems()&#10;    }&#10;&#10;    private fun setMediaItems() {&#10;        audioList.map { audio -&gt;&#10;            Log.i(&quot;Al-qiran&quot;, &quot;Audio item from viewModel: $audio&quot;)&#10;            val audioNumber = audio.surahNumber&#10;            MediaItem.Builder()&#10;                .setUri(&quot;${audio.server}${audioNumber.padStart(3, '0')}.mp3&quot;)&#10;                .setMediaMetadata(&#10;                    MediaMetadata.Builder()&#10;                        .setAlbumArtist(audio.reciter)&#10;                        .setDisplayTitle(audio.surah)&#10;                        .setSubtitle(audio.server)&#10;                        .build()&#10;                )&#10;                .build()&#10;        }.also {&#10;            Log.i(&quot;Al-qiran&quot;, &quot;$it&quot;)&#10;            audioServiceHandler.setMediaItemList(it)&#10;        }&#10;    }&#10;&#10;    private fun calculateProgressValue(currentProgress: Long) {&#10;        progress = if (currentProgress &gt; 0) ((currentProgress.toFloat() / duration) * 100f) else 0f&#10;        progressString = formatDuration(currentProgress)&#10;    }&#10;&#10;    private fun formatDuration(duration: Long): String {&#10;        val minute = TimeUnit.MINUTES.convert(duration, TimeUnit.MILLISECONDS)&#10;        val seconds = (minute) - minute * TimeUnit.SECONDS.convert(1, TimeUnit.MINUTES)&#10;        return String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minute, seconds)&#10;    }&#10;&#10;&#10;    fun onAudioEvents(audioEvent: AudioEvents) = viewModelScope.launch {&#10;        when (audioEvent) {&#10;            AudioEvents.Backward -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.Backward)&#10;            AudioEvents.Forward -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.Forward)&#10;            AudioEvents.PlayPause -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.PlayPause)&#10;            is AudioEvents.SeekTo -&gt; audioServiceHandler.onPlayerEvents(&#10;                playerEvent = PlayerEvent.SeekTo,&#10;                seekPosition = ((duration * audioEvent.position) / 100f).toLong()&#10;            )&#10;&#10;            AudioEvents.SeekToNext -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.SeekToNext)&#10;            AudioEvents.SeekToPrevious -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.SeekToPrevious)&#10;            is AudioEvents.SelectedAudioChange -&gt; audioServiceHandler.onPlayerEvents(&#10;                PlayerEvent.SelectedAudioChange,&#10;                selectedAudioIndex = audioEvent.index&#10;            )&#10;&#10;            is AudioEvents.UpdateProgress -&gt; {&#10;                audioServiceHandler.onPlayerEvents(PlayerEvent.UpdateProgress(audioEvent.newProgress))&#10;                progress = audioEvent.newProgress&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    override fun onCleared() {&#10;        viewModelScope.launch {&#10;            audioServiceHandler.onPlayerEvents(PlayerEvent.Stop)&#10;        }&#10;        super.onCleared()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="@file:OptIn(SavedStateHandleSaveableApi::class)&#10;&#10;package com.alqiran.quraanapp.ui.screens.suwar_package.viewModels.audioViewModel&#10;&#10;import android.util.Log&#10;import androidx.compose.runtime.mutableFloatStateOf&#10;import androidx.compose.runtime.mutableLongStateOf&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.lifecycle.SavedStateHandle&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.lifecycle.viewmodel.compose.SavedStateHandleSaveableApi&#10;import androidx.lifecycle.viewmodel.compose.saveable&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.common.MediaMetadata&#10;import com.alqiran.quraanapp.data.datasources.remote.model.Audio&#10;import com.alqiran.quraanapp.player.service.AudioServiceHandler&#10;import com.alqiran.quraanapp.player.service.AudioState&#10;import com.alqiran.quraanapp.player.service.PlayerEvent&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.collectLatest&#10;import kotlinx.coroutines.launch&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;import javax.inject.Inject&#10;&#10;&#10;private val audioDummy = Audio(&#10;    surahNumber = &quot;&quot;, server = &quot;&quot;, surah = &quot;000&quot;, reciter = &quot;&quot;, duration = 0L&#10;)&#10;&#10;&#10;@HiltViewModel&#10;class AudioViewModel @Inject constructor(&#10;    private val audioServiceHandler: AudioServiceHandler,&#10;    savedStateHandle: SavedStateHandle&#10;) : ViewModel() {&#10;&#10;    var duration by savedStateHandle.saveable { mutableLongStateOf(0L) }&#10;    var progress by savedStateHandle.saveable { mutableFloatStateOf(0f) }&#10;    var progressString by savedStateHandle.saveable { mutableStateOf(&quot;00:00&quot;) }&#10;    var isPlaying by savedStateHandle.saveable { mutableStateOf(false) }&#10;    var currentSelectedAudio by savedStateHandle.saveable { mutableStateOf(audioDummy) }&#10;    var audioList by savedStateHandle.saveable { mutableStateOf(listOf&lt;Audio&gt;()) }&#10;&#10;    private val _state = MutableStateFlow&lt;AudioUiState&gt;(AudioUiState.Initial)&#10;    val state = _state.asStateFlow()&#10;&#10;    init {&#10;        viewModelScope.launch {&#10;            audioServiceHandler.audioState.collectLatest { audioState -&gt;&#10;                when (audioState) {&#10;                    AudioState.Initial -&gt; _state.value = AudioUiState.Initial&#10;                    is AudioState.Buffering -&gt; calculateProgressValue(audioState.progress)&#10;                    is AudioState.Playing -&gt; isPlaying = audioState.isPlaying&#10;                    is AudioState.Progress -&gt; calculateProgressValue(audioState.progress)&#10;                    is AudioState.CurrentPlaying -&gt; currentSelectedAudio =&#10;                        audioList[audioState.mediaItemIndex]&#10;&#10;                    is AudioState.Ready -&gt; {&#10;                        duration = audioState.duration&#10;                        _state.value = AudioUiState.Ready&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun setAllAudioData(allAudio: List&lt;Audio&gt;) {&#10;        if (audioList == allAudio) return&#10;        audioList = allAudio&#10;        setMediaItems()&#10;    }&#10;&#10;    private fun setMediaItems() {&#10;        audioList.map { audio -&gt;&#10;            Log.i(&quot;Al-qiran&quot;, &quot;Audio item from viewModel: $audio&quot;)&#10;            val audioNumber = audio.surahNumber // This is now the correct surah number from API&#10;            MediaItem.Builder()&#10;                .setUri(&quot;${audio.server}${audioNumber.padStart(3, '0')}.mp3&quot;)&#10;                .setMediaMetadata(&#10;                    MediaMetadata.Builder()&#10;                        .setAlbumArtist(audio.reciter)&#10;                        .setDisplayTitle(audio.surah)&#10;                        .setSubtitle(audio.server)&#10;                        .build()&#10;                )&#10;                .build()&#10;        }.also {&#10;            Log.i(&quot;Al-qiran&quot;, &quot;$it&quot;)&#10;            audioServiceHandler.setMediaItemList(it)&#10;        }&#10;    }&#10;&#10;    private fun calculateProgressValue(currentProgress: Long) {&#10;        progress = if (currentProgress &gt; 0) ((currentProgress.toFloat() / duration) * 100f) else 0f&#10;        progressString = formatDuration(currentProgress)&#10;    }&#10;&#10;    private fun formatDuration(duration: Long): String {&#10;        val minute = TimeUnit.MINUTES.convert(duration, TimeUnit.MILLISECONDS)&#10;        val seconds = (minute) - minute * TimeUnit.SECONDS.convert(1, TimeUnit.MINUTES)&#10;        return String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minute, seconds)&#10;    }&#10;&#10;&#10;    fun onAudioEvents(audioEvent: AudioEvents) = viewModelScope.launch {&#10;        when (audioEvent) {&#10;            AudioEvents.Backward -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.Backward)&#10;            AudioEvents.Forward -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.Forward)&#10;            AudioEvents.PlayPause -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.PlayPause)&#10;            is AudioEvents.SeekTo -&gt; audioServiceHandler.onPlayerEvents(&#10;                playerEvent = PlayerEvent.SeekTo,&#10;                seekPosition = ((duration * audioEvent.position) / 100f).toLong()&#10;            )&#10;&#10;            AudioEvents.SeekToNext -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.SeekToNext)&#10;            AudioEvents.SeekToPrevious -&gt; audioServiceHandler.onPlayerEvents(PlayerEvent.SeekToPrevious)&#10;            is AudioEvents.SelectedAudioChange -&gt; audioServiceHandler.onPlayerEvents(&#10;                PlayerEvent.SelectedAudioChange,&#10;                selectedAudioIndex = audioEvent.index&#10;            )&#10;&#10;            is AudioEvents.UpdateProgress -&gt; {&#10;                audioServiceHandler.onPlayerEvents(PlayerEvent.UpdateProgress(audioEvent.newProgress))&#10;                progress = audioEvent.newProgress&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    override fun onCleared() {&#10;        viewModelScope.launch {&#10;            audioServiceHandler.onPlayerEvents(PlayerEvent.Stop)&#10;        }&#10;        super.onCleared()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>